{"name":"Gaia.CMS","tagline":"","body":"Gaia.CMS.Console HELP\r\n=====================\r\n\r\n**Índice:**\r\n\r\n**[1 - Utilização do comando de deploy](https://github.com/I-Value/Gaia.CMS/edit/master/README.md#1---utiliza%C3%A7%C3%A3o-do-comando-de-deploy)**<br>\r\n[1.1 - Configurando](https://github.com/I-Value/Gaia.CMS/edit/master/README.md#11---configurando)<br>\r\n[1.2 - Executando](https://github.com/I-Value/Gaia.CMS/edit/master/README.md#12---executando)<br><br>\r\n**[2 - Configuração do Template](https://github.com/I-Value/Gaia.CMS/edit/master/README.md#2---configura%C3%A7%C3%A3o-do-template)**<br>\r\n[2.1 - Configurando os arquivos para serem processados pelo sistema](https://github.com/I-Value/Gaia.CMS/edit/master/README.md#21---configurando-os-arquivos-para-serem-processados-pelo-sistema)<br>\r\n[2.2 - Utilizando o sistema de templates](https://github.com/I-Value/Gaia.CMS/edit/master/README.md#22---utilizando-o-sistema-de-templates)<br>\r\n[- Exemplo 1](https://github.com/I-Value/Gaia.CMS/edit/master/README.md#exemplo-1-arquivo-css)<br>\r\n[- Exemplo 2](https://github.com/I-Value/Gaia.CMS/edit/master/README.md#exemplo-2-arquivo-xmlconfig)<br>\r\n[- Exemplo 3](https://github.com/I-Value/Gaia.CMS/edit/master/README.md#exemplo-3-arquivo-htmlaspxaspxetc)<br>\r\n\r\n**[3 - Resumo de utilização](https://github.com/I-Value/Gaia.CMS/edit/master/README.md#3---resumo-de-utiliza%C3%A7%C3%A3o)**\r\n\r\n=====================\r\n\r\n##1 - Utilização do comando de deploy##\r\n\r\n###1.1 - Configurando###\r\n\r\nOs seguintes arquivos devem ser preenchidos:\r\n\r\n- baseConfig.json:\r\n\r\nEsse arquivo contém os parâmetros básicos para executar o Deploy do Template/Modelo escolhido. Este arquivo pode ser renomeado para atender as necessidades, bastando informar o nome na hora de executar o Deploy, por ex. caso deseje deixar pronto um config para o \"Modelo01\", podemos chamar o mesmo de \"modelo01BaseConfig.json\", assim o comando para executa-lo seria: \r\n\r\n```\r\nIValue.CMS.Console.exe \"caminho\\modelo01BaseConfig.json\"\r\n```\r\n\r\nEste arquivo deve ter o seguinte formato:\r\n\r\n```JSON\r\n{\r\n\"TemplateName\" : \"Modelo01\",\r\n\"TemplateConfig\" : \"templateConfig\",\r\n\"DefaultConfig\" : \"defaultConfig\",\r\n\"ImagesConfig\" : \"imagesConfig\",\r\n\"ModelFolder\" : \"modelo\",\r\n\"DefaultTemplateFolder\" : \"default\",\r\n\"ClientDirName\" : \"Cliente01\",\r\n\"SourcePath\" : \"Y:\\novopremium.com.br\\web\",\r\n\"TargetPath\" : \"Y:\\\"\r\n}\r\n```\r\n\r\n**TemplateName:** É o nome do template (nome da pasta no diretório \"SourcePath\") a ser utilizado;<br>\r\n**TemplateConfig:** Especifica o nome do arquivo de configuração para o Template (visa facilitar o processo de deploy permitindo deixar configurados arquivos para cada tipo de modelo);<br>\r\n**DefaultConfig:** Especifica o nome do arquivo de configuração para o default (visa facilitar o processo de deploy permitindo deixar configurados arquivos para cada tipo de modelo);<br>\r\n**ImagesConfig:** Especifica o nome do arquivo de configuração de imagens (visa facilitar o processo de deploy permitindo deixar configurados arquivos para cada tipo de modelo);<br>\r\n**ClientDirName:** É o nome do diretório que será criado na pasta \"TargetPath\" para fazer o deploy do Template escolhido;<br>\r\n**ModelFolder:** É o nome da pasta utilizada para fazer deploy do modelo dentro do template \"default\";<br>\r\n**DefaultTemplateFolder:** É o nome da pasta do template \"Default\";<br>\r\n**SourcePath:** É o diretório onde será encontrada a pasta “default” e a pasta do modelo especificado em “TemplateName”;<br>\r\n**TargetPath:** É a pasta destino onde será feito o deploy do Template escolhido.<br>\r\n\r\n- defaultConfig.json:\r\n\r\nEsse arquivo contém as configurações a serem aplicadas durante o processo de Deploy. Este arquivo pode ter seu nome alterado, desde que seja devidamente apontado no campo \"DefaultConfig\" do arquivo \"baseConfig.json\".<br>\r\n**Obs.:** O conteúdo deste arquivo não deve sobrepor o conteúdo do arquivo \"templateConfig.json\", caso isso ocorra, um dos dois será ignorado.\r\n\r\n- templateConfig.json:\r\n\r\nEsse arquivo contém as configurações a serem aplicadas durante o processo de Deploy. Este arquivo pode ter seu nome alterado, desde que seja devidamente apontado no campo \"TemplateConfig\" do arquivo \"baseConfig.json\".<br>\r\n**Obs.:** O conteúdo deste arquivo não deve sobrepor o conteúdo do arquivo \"defaultConfig.json\", caso isso ocorra, um dos dois será ignorado.\r\n\r\n- imagesConfig.json:\r\n\r\nEste arquivo configura o processo de deploy do Logo e da Marca d'água. Este arquivo pode ter seu nome alterado, desde que seja devidamente apontado no campo \"ImagesConfig\" do arquivo \"baseConfig.json\".\r\n\r\nEste arquivo deve ter o seguinte formato:\r\n```JSON\r\n{\r\n\"ImgFolder\" : \"img\",\r\n\"LogoImage\" : \"C:\\\\Users\\\\jhonathan.almeida\\\\Projetos\\\\cms\\\\logo.png\",\r\n\"LogoImages\" : [\r\n\t\t{\"OutputName\": \"img1.png\", \"Width\" : \"50\", \"Height\" : \"50\"},\r\n\t\t{\"OutputName\": \"img2.png\", \"Width\" : \"75\", \"Height\" : \"75\"}\r\n\t],\r\n\"WaterMarkImage\" : \"C:\\\\Users\\\\jhonathan.almeida\\\\Projetos\\\\cms\\\\marca_dagua.png\"\r\n}\r\n```\r\n\r\n**ImgFolder:** Especifica o nome do diretório onde será feito o deploy das imagens;<br>\r\n**LogoImage:** Especifica qual o arquivo a ser utilizado como logo;<br>\r\n**LogoImages:** Especifica através dos parâmetros \"OutputName\", \"Width\" e \"Height\" quais são e o tamanho dos arquivos a serem gerados com base no arquivo de logo;<br>\r\n**WaterMarkImage:** Especifica qual o arquivo a ser utilizado como Marca D'Água.\r\n\r\n###1.2 - Executando###\r\n\r\nPara executar o processo de deploy, deve-se executar o seguinte comando: \r\n```\r\nIValue.CMS.Console.exe \"caminhoDoArquivo\\baseConfig.json\".\r\n```\r\n\r\nOs arquivos de configuração devem estar na mesma pasta do arquivo \"baseConfig.json\".\r\n\r\n##2 - Configuração do Template##\r\n\r\nO sistema de CMS/Deploy de template utiliza o algoritmo de Templates Mustache na sua compilação .Net chamada Nustache.\r\n\r\nCom este sistema utilizamos tags \"{{nomeDaVariavel}}\" para definir os templates a serem substituídos, com os valores especificados nos arquivos \"defaultConfig.json\" e \"templateConfig.json\".\r\n\r\n###2.1 - Configurando os arquivos para serem processados pelo sistema###\r\n\r\nPara que um arquivo seja marcado para ser processado pelo sistema, o mesmo deve conter a tag ```\"<#CMS_TEMPLATE#>\"``` declarada em algum local dentro do mesmo (de preferência nas primeiras linhas do arquivo), podendo a mesma estar dentro de um comentário, ex:\r\n\r\n**Arquivos HTML, XML, CONFIG, ASPX, ASCX, etc.:** ```<!-- <#CMS_TEMPLATE#> -->```<br>\r\n**Arquivos CSS:** ```/* <#CMS_TEMPLATE#> */```\r\n\r\n###2.2 - Utilizando o sistema de templates###\r\n\r\nUtilizando os arquivos \"defaultConfig.json\" e \"templateConfig.json\", iremos criar variáveis para serem substituídas no momento do Deploy.\r\n\r\n####Exemplo 1: arquivo CSS####\r\n\r\nConsidere o seguinte CSS:\r\n```CSS\r\nbody {\r\n    background-color: #AFCC5E;\r\n    width: 1004px;\r\n    border: 1px solid black;\r\n    font-size: 12px;\r\n}\r\n```\r\nNeste exemplo iremos criar um template para um arquivo CSS, para substituir a cor background padrão do sistema, o tamanho da fonte, a largura e a cor da borda.<br>\r\n**Obs.:** Para o arquivo ser processado pelo sistema, lembre-se de adicionar a tag ```\"/* <#CMS_TEMPLATE#> */\"``` na primeira linha do arquivo.\r\n\r\nAssumindo que este CSS faça parte do \"Modelo01\" do template, iremos criar as seguintes variáveis no arquivo \"templateConfig.json\":\r\n\r\n```JSON\r\n{\r\n\"BodyBackgroundColor\" : \"#AFCC5E\",\r\n\"BodyWidth\" : \"1004px\",\r\n\"BodyFontSize\" : \"12px\",\r\n\"BodyBorderColor\" : \"black\"\r\n}\r\n```\r\n\r\nCom base nestas variáveis, vamos atualizar o CSS para o seguinte:\r\n```CSS\r\nbody {\r\n    background-color: {{BodyBackgroundColor}};\r\n    width: {{BodyWidth}};\r\n    border: 1px solid {{BodyBorderColor}};\r\n    font-size: {{BodyFontSize}};\r\n}\r\n```\r\n\r\nAo executar o deploy, teremos o resultado desejado no arquivo CSS:\r\n```CSS\r\nbody {\r\n    background-color: #AFCC5E;\r\n    width: 1004px;\r\n    border: 1px solid black;\r\n    font-size: 12px;\r\n}\r\n```\r\n\r\n####Exemplo 2: arquivo XML/Config####\r\n\r\nConsidere o seguinte XML (parcial):\r\n```XML\r\n<appSettings>\r\n\t<add key=\"cod_imb\" value=\"2357\" />\r\n\t.\r\n\t.\r\n\t.\r\n</appSettings>\r\n```\r\n\r\nNeste exemplo iremos criar um template para um arquivo XML, para informar o código da imobiliária desejada.<br>\r\n**Obs.:** Para o arquivo ser processado pelo sistema, lembre-se de adicionar a tag ```\"<!-- <#CMS_TEMPLATE#> -->\"``` na primeira linha do arquivo.\r\n\r\nAssumindo que este XML/Config faça parte do \"default\" do template, iremos criar a seguinte variável no arquivo \"defaultConfig.json\":\r\n\r\n```JSON\r\n{\r\n\"CodImb\" : \"2375\"\r\n}\r\n```\r\n\r\nCom base nesta variável, vamos atualizar o XML/Config para o seguinte:\r\n```XML\r\n<appSettings>\r\n\t<add key=\"cod_imb\" value=\"{{CodImb}}\" />\r\n\t.\r\n\t.\r\n\t.\r\n</appSettings>\r\n```\r\n\r\nAo executar o deploy, teremos o resultado desejado no arquivo XML/Config:\r\n```XML\r\n<appSettings>\r\n\t<add key=\"cod_imb\" value=\"2357\" />\r\n\t.\r\n\t.\r\n\t.\r\n</appSettings>\r\n```\r\n\r\n####Exemplo 3: arquivo HTML/ASPX/ASPX/etc####\r\n\r\nConsidere que na pagina \"index.aspx\" devemos gerar a seguinte tabela com base numa lista de contatos:\r\n```HTML\r\n<table border=\"0\">\r\n\t<tr>\r\n\t\t<td>SJC</td>\r\n\t\t<td>1111-9999</td>\r\n\t\t<td>Inacio</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>Campinas</td>\r\n\t\t<td>2222-8888</td>\r\n\t\t<td>Mauro</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>São Paulo</td>\r\n\t\t<td>3333-7777</td>\r\n\t\t<td>Fidélio</td>\r\n\t</tr>\r\n</table>\r\n```\r\n\r\nSendo as informações: Unidade, Telefone e Nome do Contato.\r\n\r\nNeste exemplo iremos criar um template para um arquivo ASPX, para montar dinamicamente uma tabela de contatos da imobiliária.<br>\r\n**Obs.:** Para o arquivo ser processado pelo sistema, lembre-se de adicionar a tag ```\"<!-- <#CMS_TEMPLATE#> -->\"``` na primeira linha do arquivo.\r\n\r\nAssumindo que este ASPX faça parte do \"Modelo01\" do template, iremos criar a seguinte estrutura no arquivo \"templateConfig.json\":\r\n\r\n```JSON\r\n\"ListaContatos\" :[\r\n\t{\"Unidade\" : \"SJC\", \"Telefone\" : \"1111-9999\", \"Nome\" : \"Inacio\"},\r\n\t{\"Unidade\" : \"Campinas\", \"Telefone\" : \"2222-8888\", \"Nome\" : \"Mauro\"},\r\n\t{\"Unidade\" : \"São Paulo\", \"Telefone\" : \"3333-7777\", \"Nome\" : \"Fidélio\"}\r\n]\r\n```\r\n\r\nCom base nesta estrutura, vamos atualizar o ASPX para o seguinte:\r\n```HTML\r\n<table border=\"0\">\r\n\t{{#ListaContatos}}\r\n\t<tr>\r\n\t\t<td>{{Unidade}}</td>\r\n\t\t<td>{{Telefone}}</td>\r\n\t\t<td>{{Nome}}</td>\r\n\t</tr>\r\n\t{{/ListaContatos}}\r\n</table>\r\n```\r\n\r\nAo executar o deploy, teremos o resultado desejado no arquivo \"index.aspx\":\r\n```HTML\r\n<table border=\"0\">\r\n\t<tr>\r\n\t\t<td>SJC</td>\r\n\t\t<td>1111-9999</td>\r\n\t\t<td>Inacio</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>Campinas</td>\r\n\t\t<td>2222-8888</td>\r\n\t\t<td>Mauro</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>São Paulo</td>\r\n\t\t<td>3333-7777</td>\r\n\t\t<td>Fidélio</td>\r\n\t</tr>\r\n</table>\r\n```\r\n\r\n##3 - Resumo de utilização##\r\n\r\n1 - Adicionar a tag de marcação de template (```\"<#CMS_TEMPLATE#>\"```) no arquivo desejado (deve estar dentro de um comentário);<br>\r\n2 - Identifique as variáveis/valores que deseja transformar e template, e substitua no formato \"{{nomeDaVariavel}}\";<br>\r\n3 - No arquivo correspondente (\"defaultConfig.json\" ou \"templateConfig.json\") crie as variáveis identificadas anteriormente em notação JSON;<br>\r\n4 - Repita os passos 1 a 3 para todos os arquivos a serem transformados em template;<br>\r\n5 - Configure o arquivo \"baseConfig.json\" com as informações desejadas;<br>\r\n6 - Configure o arquivo \"imagensConfig.json\" com os arquivos Logo e Marca D'Água, e a lista de arquivos/tamanhos a serem gerados;<br>\r\n7 - execute a aplicação \"IValue.CMS.Console.exe\" informando o arquivo baseConfig.json.<br>\r\n\r\nPara utilização de lista de valores, a lista deve ser declarada no formato:\r\n```JSON\r\n\"NomeDaLista\" :[\r\n\t{\"Parametro01\" : \"valor01\", \"Parametro02\" : \"valor02\", ... , \"ParametroN\" : \"valorN\"},\r\n\t{\"Parametro01\" : \"valor01\", \"Parametro02\" : \"valor02\", ... , \"ParametroN\" : \"valorN\"},\r\n\t.\r\n\t.\r\n\t.\r\n\t{\"Parametro01\" : \"valor01\", \"Parametro02\" : \"valor02\", ... , \"ParametroN\" : \"valorN\"}\r\n]\r\n```\r\n\r\nPara consumir esta lista deve-se utilizar o seguinte template:\r\n```\r\n{{#NomeDaLista}}\r\n\tProcessar os itens da lista conforme necessário, utilizando o seguinte formato {{NomeDoParametro}}\r\n{{/NomeDaLista}}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}